namespace code_lessons {
    public class lessons{
        public static void lesson_1() {
            // 0. Вывод на экран hello World
            //Console.WriteLine("hello world");
            // 1. Переменные и встроенные типы
            Console.WriteLine("1. Переменные и встроенные типы");
            int a = 15;
            // float
            float b = 5.13f;
            // Операции над числовыми переменными
            // К числовыми переменным можно применять операции +,-,/,*,%
            double c = a + b;
            // double c = a - b;
            // double c = a / b;
            // double c = a * b;
            // double c = a % b;
            // string - это строка
            string str = "some shit";
            Console.WriteLine(a);
            Console.WriteLine(b);
            Console.WriteLine(c);
            Console.WriteLine(str);
        }

        public static void lesson_2() {
            // Явные преобразования (приведения)
            // Простой пример привидения это получить код символа
            char symbool = 'A';
            int code_symbool = (int)symbool;
            Console.WriteLine(code_symbool);
            /* 
                Пользовательские преобразования,
                позволяют выполнить преобразование между несовместимыми типами.
                Для преобразование используйтся вспомогательные классы
                такие как System.Convert, System.DateTime  и так далее.
            */
            string str = "1000";
            int int_str = Convert.ToInt32(str);
            Console.WriteLine(int_str);
            // Получение данных от пользователей
            // Для получение данных от пользователя нужно вызвать метод ReadLine()
            // Вызову метод ReadLine() и запишу то что пользователь ввёл в переменную
            Console.WriteLine("Введите ваш возраст:");
            /* 
                Так как пользователь может нечего не ввести 
                нужно определить переменную которая может принимать null.
                Чтобы определить такую переменную нужно
                после названия типа указать знак вопроса
            */
            string? user_age = Console.ReadLine();
            Console.WriteLine("Ваш возраст равен {0}",user_age);

        }

        public static void lesson_3() {
            /* 
            * Условные конструкции *
                Условные конструкции позволяют направить работу прогграмы по одному из нескольких путей,
                в зависимости от того, истинно ли условие внутри конструкции
            */
            // Пример
            Console.WriteLine("Введите ваш возраст:");
            int age = Convert.ToInt32(Console.ReadLine());
            bool andrey_age = (age == 15);
            if(age < 16) // То что внутри () это условие если оно правильно то выполняеться код ниже
                Console.WriteLine("Вы слишком молоды чтобы работать");
            else if(age >= 0) // Если первое условие оказалось неправильным то проверяем это условие
                Console.WriteLine("Ошибка!!!");
            else if(andrey_age) // И кстати результатом условия является значение типа bool
            // Так что мы можем использовать переменные типа bool
                Console.WriteLine("Ха,тебе столько лет сколько Андрею(создателю прогграмы)");
            else // Если ни одно из этих условий неправильно то выполняем этот код
                Console.WriteLine("Вы спокойно можете работать");


        }
        public static void lesson_4() {
            /* 
            * Тернарный оператор и switch/case *
                Тернарный оператор это укороченная версия условной конструкции if else.
                Конструкция switch/case оценивает некоторое выражение и сравнивает его значение с набором значений. 
                И при совпадении значений выполняет определенный код
                Выглядит формальный код тернарного оператора так:
                Выражение1 ? Выражение2 : ВыражениеЗ;
                А формальный код switch/case вот так:
                switch (выражение)
                    {
                        case значение1:
                            код,выполняемый если выражение имеет значение1
                            break;
                        case значение2:
                            код,выполняемый если выражение имеет значение2
                            break;
                        //.............
                        case значениеN:
                            код, выполняемый если выражение имеет значениеN
                            break;
                        default:
                            код, выполняемый если выражение не имеет ни одно из выше указанных значений
                            break;
                    }

            */
            // Пример тернарного оператора
            // С помощью тернарного оператора мы укоротим предыдущий пример
            // Console.WriteLine("Введите ваш возраст:");
            // int age = Convert.ToInt32(Console.ReadLine());
            // string is_correct_age = age < 16 ? "Вы слишком молоды чтобы работать" : "Вы спокойно можете работать";
            // Кстати лучше не злоупотреблять тернарным оператором а то можно сделать код не читаемым
            // Console.WriteLine(is_correct_age);
            Console.WriteLine("Введите количество гостей:");
            int guests = Convert.ToInt32(Console.ReadLine());
            // В скобках указываем значение которые будем сравнивать
            switch (guests)
            {
                // Тип значения должен совподать с типом сравниваемого выражения
                case 0: // Если значение guests равно 0 выполниться этот блок кода
                    Console.WriteLine("Жалко вас, никто к вам не придёт =(.");
                    break; // слово break обозначает конец блока кода каждого случая
                case 1: // Если значение guests равно 1  выполниться этот блок кода
                    Console.WriteLine("Классно хоть кто то вам придёт.");
                    break;
                case 2: // Если значение guests равно 2  выполниться этот блок кода
                    Console.WriteLine("Ооо намечаеться что-то интересное.");
                    break;
                case 3: // Если значение guests равно 3  выполниться этот блок кода
                    Console.WriteLine("Да у вас будет вечеринка =).");
                    break;
                // Так же можно сделать проваливание,тоесть выполнить один блок кода к нескольким случаям
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                    Console.WriteLine("Огого,да это же целая куча людей");
                    break;
                // Так как проваливание очень часто приводило к багам ввели оператор goto case значение_случая;
                // Этот оператор позволяет явно переходить из одного случая к другому,и ему не важно где
                // этот случай находить выше или ниже.И как тернарнарным оператором злоупотреблять им не стоит
                // иначе код может превратиться в лютую лапшу
                case 11:
                    Console.WriteLine("Как вы собрали столько людей?");
                    break;
                case 12:
                    goto case 11;
                case 13:
                    goto case 11;
                case 14:
                    goto case 11;
                case 15:
                    goto case 11;
                case 16:
                    goto case 11;
                case 17:
                    goto case 11;
                case 18:
                    goto case 11;
                case 19:
                    goto case 11;
                case 20:
                    goto case 11;
                default: // Этот блок кода выполниться выражение не имеет ни одно из выше указанных значений
                    Console.WriteLine("Надеюсь вам будет весело");
                    break;
            }
        }

        public static void lesson_5() {
            /* 
                Оператор проверки на null и логические операции
                Оператор ?? проверяет выражение на присуствие null
                Формальный код выглядит так:
                выражение_возращаемое_когда_оно_не_равно_null ??  выражение_возращаемое_когда_оно_равно_null
                https://metanit.com/sharp/tutorial/3.26.php
            */
            // Простой пример
            string? text = null;
            string name = text ?? "Andrey"; // равно Andrey, так как text равен null
            // Если текст равен null то значение переменной name становиться Andrey иначе сохраняться текст
            Console.WriteLine(name);    // Andrey

            int? id = 200;
            int personid = id ?? 1; // равно 200, так как id не равен null
            Console.WriteLine(personid);    // 200
            // Основные логические операции
            // ||-Логическое ИЛИ,&&-Логическое И,!-Логическое отрицание
            // Виды логических операций:
            // 1) Логическое И возращает true если оба выражения верны
            // bool x1 = (5 > 6) && (4 < 6); 5 > 6 - false, 4 < 6 - true, поэтому возвращается false
            // bool x2 = (5 < 6) && (4 < 6); 5 < 6 - true, 4 < 6 - true, поэтому возвращается true
            // 2) Логическое ИЛИ Возвращает true, если хотя бы одно из выражений верно.
            // bool x1 = (5 > 6) || (4 < 6); 5 > 6 - false, 4 < 6 - true, поэтому возвращается true
            // bool x2 = (5 > 6) || (4 > 6); 5 > 6 - false, 4 > 6 - false, поэтому возвращается false
            // 3)  Логическое отрицания, производится над одним выражением и возвращает true, 
            // если операнд равен false. Если операнд равен true, то операция возвращает false:
            // bool a = true;
            // bool b = !a;  false
            //Console.WriteLine("x1={0},x2={1}",x1,x2);
            


        }

    }
}